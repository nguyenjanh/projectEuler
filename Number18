public class Number18 {

	public static int MaximumPath(int[][] nums, int col, int row) {
		
		if (col == 0)
			return nums[0][0];
		
		if (row >= nums[col].length) {
			col--;
			row = 0;
		}
		
		if (nums[col + 1][row] > nums[col + 1][row + 1])
			nums[col][row] += nums[col + 1][row];
		else
			nums[col][row] += nums[col + 1][row + 1];
		
		row++;
		
		return MaximumPath(nums, col, row);
		
	}
	
	public static void main(String[] args) {
		
		final long startTime = System.currentTimeMillis();

		//Find the maximum total from top to bottom of the triangle below
		
		int[][] nums = {{75},
						{95,64},
						{17,47,82},
						{18,35,87,10},
						{20,04,82,47,65},
						{19,01,23,75,03,34},
						{88,02,77,73,07,63,67},
						{99,65,04,28,06,16,70,92},
						{41,41,26,56,83,40,80,70,33},
						{41,48,72,33,47,32,37,16,94,29},
						{53,71,44,65,25,43,91,52,97,51,14},
						{70,11,33,28,77,73,17,78,39,68,17,57},
						{91,71,52,38,17,14,91,43,58,50,27,29,48},
						{63,66,04,68,89,53,67,30,73,16,69,87,40,31},
						{04,62,98,27,23,9,70,98,73,93,38,53,60,04,23}};
		
		System.out.println(MaximumPath(nums, nums.length - 2, 0));

		final long endTime = System.currentTimeMillis();

		System.out.println("Total execution time: " + (endTime - startTime) + "ms");
	}

}
